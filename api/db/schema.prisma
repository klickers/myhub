datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = "native"
}

model User {
    clerkId String @id
    email   String @unique

    items               Item[]
    itemStatuses        ItemStatus[]
    timeBlocks          TimeBlock[]
    timeBlockTypes      TimeBlockType[]
    sessions            Session[]
    keyValues           KeyValue[]
    googleCalendarLinks GoogleCalendarLink[]
    Setting             Setting[]
}

model KeyValue {
    key    String @id
    value  String
    userId String

    user User @relation(fields: [userId], references: [clerkId])
}

enum ItemType {
    FOLDER
    PROJECT
    TASK
}

model Item {
    id                 String    @id @default(uuid())
    type               ItemType
    name               String
    slug               String
    description        String?
    notes              String?   @db.Text
    startDate          DateTime?
    softDueDate        DateTime?
    dueDate            DateTime?
    estimatedTime      Int?
    minBlockTime       Int?
    maxBlockTime       Int?
    maxBlockTimePerDay Int?
    parentId           String?
    statusId           Int?
    userId             String

    parent   Item?       @relation("ParentChild", fields: [parentId], references: [id])
    children Item[]      @relation("ParentChild")
    status   ItemStatus? @relation(fields: [statusId], references: [id])
    user     User        @relation(fields: [userId], references: [clerkId])
    sessions Session[]

    @@unique([userId, slug])
}

enum StatusCode {
    OPEN
    IN_PROGRESS
    COMPLETED
    ARCHIVED
}

model ItemStatus {
    id     Int        @id @default(autoincrement())
    name   String
    code   StatusCode
    userId String

    user User @relation(fields: [userId], references: [clerkId])

    items Item[]

    @@unique([userId, name])
}

model TimeBlock {
    id     Int      @id @default(autoincrement())
    start  DateTime
    end    DateTime
    typeId Int
    notes  String?
    userId String

    type TimeBlockType @relation(fields: [typeId], references: [id])
    user User          @relation(fields: [userId], references: [clerkId])

    @@unique([userId, start, end])
}

model TimeBlockType {
    id     Int    @id @default(autoincrement())
    name   String
    userId String

    user User @relation(fields: [userId], references: [clerkId])

    timeBlocks TimeBlock[]

    @@unique([userId, name])
}

enum SessionType {
    PLANNED
    TRACKED
}

model Session {
    id     Int         @id @default(autoincrement())
    type   SessionType
    start  DateTime
    end    DateTime
    notes  String?
    userId String
    itemId String?

    user User  @relation(fields: [userId], references: [clerkId])
    item Item? @relation(fields: [itemId], references: [id])
}

model GoogleCalendarLink {
    id           String  @id @default(uuid())
    title        String?
    calendarLink String
    classes      String?
    userId       String

    user User @relation(fields: [userId], references: [clerkId])

    @@unique([userId, calendarLink])
}

model Setting {
    id     String @id @default(uuid())
    name   String
    value  String
    userId String

    user User @relation(fields: [userId], references: [clerkId])

    @@unique([userId, name])
}
